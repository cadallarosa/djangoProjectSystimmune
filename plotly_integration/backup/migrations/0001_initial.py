# Generated by Django 5.1.4 on 2025-03-03 03:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AktaChromatogram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ml', models.FloatField()),
                ('result_id', models.CharField(blank=True, max_length=50, null=True)),
                ('uv_1_280', models.FloatField(blank=True, null=True)),
                ('uv_2_0', models.FloatField(blank=True, null=True)),
                ('uv_3_0', models.FloatField(blank=True, null=True)),
                ('cond', models.FloatField(blank=True, null=True)),
                ('conc_b', models.FloatField(blank=True, null=True)),
                ('pH', models.FloatField(blank=True, null=True)),
                ('system_flow', models.FloatField(blank=True, null=True)),
                ('system_linear_flow', models.FloatField(blank=True, null=True)),
                ('system_pressure', models.FloatField(blank=True, null=True)),
                ('cond_temp', models.FloatField(blank=True, null=True)),
                ('sample_flow', models.FloatField(blank=True, null=True)),
                ('sample_linear_flow', models.FloatField(blank=True, null=True)),
                ('sample_pressure', models.FloatField(blank=True, null=True)),
                ('preC_pressure', models.FloatField(blank=True, null=True)),
                ('deltaC_pressure', models.FloatField(blank=True, null=True)),
                ('postC_pressure', models.FloatField(blank=True, null=True)),
                ('frac_temp', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'akta_chromatogram',
            },
        ),
        migrations.CreateModel(
            name='AktaColumnsCharacteristics',
            fields=[
                ('column_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('column_type', models.CharField(max_length=255)),
                ('technique', models.CharField(max_length=255)),
                ('column_volume', models.FloatField()),
                ('diameter', models.FloatField()),
                ('bed_height', models.FloatField()),
                ('resin', models.CharField(max_length=255)),
                ('alias', models.CharField(max_length=255)),
                ('asymmetry', models.FloatField()),
                ('plates_per_meter', models.FloatField()),
                ('HETP', models.FloatField()),
                ('num_cycles', models.BigIntegerField()),
                ('avg_starting_pressure', models.FloatField()),
            ],
            options={
                'db_table': 'akta_columns_characteristics',
            },
        ),
        migrations.CreateModel(
            name='AktaFraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_id', models.CharField(blank=True, max_length=50, null=True)),
                ('ml', models.FloatField(blank=True, null=True)),
                ('fraction', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'akta_fraction',
            },
        ),
        migrations.CreateModel(
            name='AktaMethodInformation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('method_name', models.CharField(max_length=255)),
                ('last_saved', models.DateTimeField()),
                ('created_by_user', models.CharField(max_length=255)),
                ('method_notes', models.TextField()),
                ('result_name', models.CharField(max_length=255)),
                ('start_notes', models.TextField()),
                ('scouting', models.BigIntegerField()),
                ('created_for_system', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'akta_method_information',
            },
        ),
        migrations.CreateModel(
            name='AktaResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result_id', models.CharField(max_length=50, unique=True)),
                ('column_name', models.TextField(blank=True, null=True)),
                ('column_volume', models.TextField(blank=True, null=True)),
                ('method', models.TextField(blank=True, null=True)),
                ('result_path', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('user', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_id', models.CharField(blank=True, max_length=255, null=True)),
                ('run_type', models.BigIntegerField(blank=True, null=True)),
                ('scouting_id', models.BigIntegerField(blank=True, null=True)),
                ('scouting_run_num', models.BigIntegerField(blank=True, null=True)),
                ('group_id', models.BigIntegerField(blank=True, null=True)),
                ('system', models.CharField(blank=True, max_length=255, null=True)),
                ('source_material_id', models.BigIntegerField(blank=True, null=True)),
                ('downstream_step_id', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'akta_result',
            },
        ),
        migrations.CreateModel(
            name='AktaRunLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_id', models.CharField(blank=True, max_length=50, null=True)),
                ('ml', models.FloatField(blank=True, null=True)),
                ('log_text', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'akta_run_log',
            },
        ),
        migrations.CreateModel(
            name='AktaScoutingList',
            fields=[
                ('scouting_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('total_num_of_scoutings', models.BigIntegerField()),
                ('run_scouting', models.BigIntegerField()),
                ('run', models.BigIntegerField()),
                ('scouting', models.BooleanField()),
                ('variable', models.TextField()),
                ('block', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('unit', models.CharField(max_length=255)),
                ('value', models.FloatField()),
            ],
            options={
                'db_table': 'akta_scouting_list',
            },
        ),
        migrations.CreateModel(
            name='DnAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dn', models.CharField(max_length=255)),
                ('project_id', models.CharField(max_length=255)),
                ('study_name', models.CharField(max_length=255)),
                ('description_of_purpose', models.TextField()),
                ('load_volume', models.FloatField()),
                ('notes', models.TextField()),
            ],
            options={
                'db_table': 'dn_assignment',
            },
        ),
        migrations.CreateModel(
            name='EmpowerColumnLogbook',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('column_serial_number', models.CharField(max_length=255, unique=True)),
                ('column_name', models.CharField(max_length=255)),
                ('total_injections', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'empower_column_logbook',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('method_id', models.AutoField(primary_key=True, serialize=False)),
                ('method_type', models.IntegerField(blank=True, null=True)),
                ('new_column_1', models.IntegerField(blank=True, null=True)),
                ('new_column_2', models.IntegerField(blank=True, null=True)),
                ('new_column_3', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'method',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PDSamples',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result_id', models.IntegerField()),
                ('pd_number', models.CharField(max_length=255)),
                ('sample_volume_ul', models.FloatField()),
                ('identifier', models.CharField(max_length=255)),
                ('description_volume', models.TextField()),
                ('a280_date', models.DateField(blank=True, null=True)),
                ('concentration_mg_ml', models.FloatField(blank=True, null=True)),
                ('sec_date', models.DateField(blank=True, null=True)),
                ('hmw_percentage', models.FloatField(blank=True, null=True)),
                ('mp_percentage', models.FloatField(blank=True, null=True)),
                ('lmw_percentage', models.FloatField(blank=True, null=True)),
                ('sec_total_area', models.FloatField(blank=True, null=True)),
                ('sec_injection_ug', models.FloatField(blank=True, null=True)),
                ('sec_dilution', models.FloatField(blank=True, null=True)),
                ('sec_load_volume_ul', models.FloatField(blank=True, null=True)),
                ('hplc_proa_titer_mg_ml', models.FloatField(blank=True, null=True)),
                ('hcp_ppm', models.FloatField(blank=True, null=True)),
                ('proa_ppm', models.FloatField(blank=True, null=True)),
                ('dna_ppm', models.FloatField(blank=True, null=True)),
                ('akta_fraction_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'pd_samples',
            },
        ),
        migrations.CreateModel(
            name='ProjectID',
            fields=[
                ('project_name', models.CharField(blank=True, max_length=255, null=True)),
                ('sip_number', models.CharField(blank=True, max_length=255, null=True)),
                ('clone_id', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('analyst', models.CharField(blank=True, max_length=255, null=True)),
                ('harvest_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'project_id',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProjectInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protein', models.TextField(blank=True, null=True)),
                ('project', models.TextField()),
                ('project_description', models.TextField(blank=True, null=True)),
                ('molecule_type', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('purifications', models.TextField(blank=True, null=True)),
                ('plasmids', models.TextField(blank=True, null=True)),
                ('plasmid_description', models.TextField(blank=True, null=True)),
                ('tags', models.TextField(blank=True, null=True)),
                ('transfections', models.TextField(blank=True, null=True)),
                ('titer', models.FloatField(blank=True, null=True)),
                ('protein_concentration', models.FloatField(blank=True, null=True)),
                ('nanodrop_e1', models.FloatField(blank=True, null=True)),
                ('molecular_weight', models.FloatField(blank=True, null=True)),
                ('percent_poi', models.FloatField(blank=True, null=True)),
                ('pi', models.FloatField(blank=True, null=True)),
                ('latest_purification_date', models.DateTimeField(blank=True, null=True)),
                ('purified', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'project_information',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportInstance',
            fields=[
                ('report_instance_id', models.AutoField(primary_key=True, serialize=False)),
                ('exclusions', models.TextField(blank=True, null=True)),
                ('report_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'report_instance',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result_id', models.IntegerField()),
                ('system_name', models.CharField(blank=True, max_length=255, null=True)),
                ('project_name', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_set_id', models.IntegerField(blank=True, null=True)),
                ('sample_set_name', models.CharField(blank=True, max_length=255, null=True)),
                ('acquired_by', models.CharField(blank=True, max_length=255, null=True)),
                ('column_serial_number', models.CharField(blank=True, max_length=255, null=True)),
                ('new_column', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'results',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SartoflowTimeSeriesData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.CharField(max_length=255)),
                ('pdat_time', models.DateTimeField()),
                ('process_time', models.FloatField(blank=True, null=True)),
                ('ag2100_value', models.FloatField(blank=True, null=True)),
                ('ag2100_setpoint', models.FloatField(blank=True, null=True)),
                ('ag2100_mode', models.IntegerField(blank=True, null=True)),
                ('ag2100_output', models.FloatField(blank=True, null=True)),
                ('dpress_value', models.FloatField(blank=True, null=True)),
                ('dpress_output', models.FloatField(blank=True, null=True)),
                ('dpress_mode', models.IntegerField(blank=True, null=True)),
                ('dpress_setpoint', models.FloatField(blank=True, null=True)),
                ('f_perm_value', models.FloatField(blank=True, null=True)),
                ('p2500_setpoint', models.FloatField(blank=True, null=True)),
                ('p2500_value', models.FloatField(blank=True, null=True)),
                ('p2500_output', models.FloatField(blank=True, null=True)),
                ('p2500_mode', models.IntegerField(blank=True, null=True)),
                ('p3000_setpoint', models.FloatField(blank=True, null=True)),
                ('p3000_mode', models.IntegerField(blank=True, null=True)),
                ('p3000_output', models.FloatField(blank=True, null=True)),
                ('p3000_value', models.FloatField(blank=True, null=True)),
                ('p3000_t', models.FloatField(blank=True, null=True)),
                ('pir2600', models.FloatField(blank=True, null=True)),
                ('pir2700', models.FloatField(blank=True, null=True)),
                ('pirc2500_value', models.FloatField(blank=True, null=True)),
                ('pirc2500_output', models.FloatField(blank=True, null=True)),
                ('pirc2500_setpoint', models.FloatField(blank=True, null=True)),
                ('pirc2500_mode', models.IntegerField(blank=True, null=True)),
                ('qir2000', models.FloatField(blank=True, null=True)),
                ('qir2100', models.FloatField(blank=True, null=True)),
                ('tir2100', models.FloatField(blank=True, null=True)),
                ('tmp', models.FloatField(blank=True, null=True)),
                ('wir2700', models.FloatField(blank=True, null=True)),
                ('wirc2100_output', models.FloatField(blank=True, null=True)),
                ('wirc2100_setpoint', models.FloatField(blank=True, null=True)),
                ('wirc2100_mode', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sartoflow_time_series_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SystemInformation',
            fields=[
                ('system_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('channel_1', models.CharField(blank=True, max_length=255, null=True)),
                ('channel_2', models.CharField(blank=True, max_length=255, null=True)),
                ('channel_3', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'system_information',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('user_id', models.IntegerField()),
                ('user_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('user_initials', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChromMetadata',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result_id', models.IntegerField()),
                ('system_name', models.CharField(max_length=255)),
                ('sample_name', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_set_name', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_set_id', models.IntegerField(blank=True, null=True)),
                ('channel_1', models.CharField(blank=True, max_length=255, null=True)),
                ('channel_2', models.CharField(blank=True, max_length=255, null=True)),
                ('channel_3', models.CharField(blank=True, max_length=255, null=True)),
                ('average_pressure', models.FloatField(blank=True, null=True)),
                ('max_pressure', models.FloatField(blank=True, null=True)),
                ('min_pressure', models.FloatField(blank=True, null=True)),
                ('pressure_variance', models.FloatField(blank=True, null=True)),
                ('pressure_stddev', models.FloatField(blank=True, null=True)),
                ('retention_time_range', models.FloatField(blank=True, null=True)),
                ('peak_pressure_time', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'chrom_metadata',
                'managed': True,
                'unique_together': {('result_id', 'system_name')},
            },
        ),
        migrations.CreateModel(
            name='PeakResults',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result_id', models.IntegerField()),
                ('channel_name', models.CharField(blank=True, max_length=255, null=True)),
                ('peak_name', models.CharField(blank=True, max_length=255, null=True)),
                ('peak_retention_time', models.FloatField(blank=True, null=True)),
                ('peak_start_time', models.FloatField(blank=True, null=True)),
                ('peak_end_time', models.FloatField(blank=True, null=True)),
                ('area', models.IntegerField(blank=True, null=True)),
                ('percent_area', models.FloatField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('asym_at_10', models.FloatField(blank=True, null=True)),
                ('plate_count', models.FloatField(blank=True, null=True)),
                ('res_hh', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'peak_results',
                'managed': True,
                'unique_together': {('result_id', 'peak_retention_time')},
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('report_name', models.CharField(blank=True, max_length=255, null=True)),
                ('analysis_type', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_type', models.CharField(blank=True, max_length=255, null=True)),
                ('selected_samples', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(blank=True, null=True)),
                ('selected_result_ids', models.TextField(blank=True, null=True)),
                ('project_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plotly_integration.projectid')),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='plotly_integration.systeminformation')),
            ],
            options={
                'db_table': 'report',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result_id', models.IntegerField()),
                ('system_name', models.CharField(max_length=255)),
                ('time', models.FloatField()),
                ('channel_1', models.FloatField(blank=True, null=True)),
                ('channel_2', models.FloatField(blank=True, null=True)),
                ('channel_3', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'time_series_data',
                'managed': True,
                'unique_together': {('result_id', 'time')},
            },
        ),
        migrations.CreateModel(
            name='SampleMetadata',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result_id', models.IntegerField()),
                ('system_name', models.CharField(max_length=255)),
                ('project_name', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_prefix', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_number', models.IntegerField(blank=True, null=True)),
                ('sample_suffix', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_type', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_name', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_set_id', models.IntegerField(blank=True, null=True)),
                ('sample_set_name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_acquired', models.DateTimeField(blank=True, null=True)),
                ('acquired_by', models.CharField(blank=True, max_length=255, null=True)),
                ('run_time', models.FloatField(blank=True, null=True)),
                ('processing_method', models.CharField(blank=True, max_length=255, null=True)),
                ('processed_channel_description', models.CharField(blank=True, max_length=255, null=True)),
                ('injection_volume', models.FloatField(blank=True, null=True)),
                ('injection_id', models.IntegerField(blank=True, null=True)),
                ('column_name', models.CharField(blank=True, max_length=255, null=True)),
                ('column_serial_number', models.CharField(blank=True, max_length=255, null=True)),
                ('instrument_method_id', models.IntegerField(blank=True, null=True)),
                ('instrument_method_name', models.CharField(blank=True, max_length=255, null=True)),
                ('column_id', models.ForeignKey(db_column='column_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='plotly_integration.empowercolumnlogbook')),
            ],
            options={
                'db_table': 'sample_metadata',
                'managed': True,
                'unique_together': {('result_id', 'system_name')},
            },
        ),
    ]
